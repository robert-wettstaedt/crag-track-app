{
  "id": "295bed96-5e38-476b-a8d4-a9aaf6de994e",
  "prevId": "5c2429db-6081-43b6-ad48-10e14fb6a0aa",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.activities": {
      "name": "activities",
      "schema": "",
      "columns": {
        "created_at": {
          "name": "created_at",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "CURRENT_TIMESTAMP"
        },
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "type": {
          "name": "type",
          "type": "activity_type",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "user_fk": {
          "name": "user_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "entity_id": {
          "name": "entity_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "entity_type": {
          "name": "entity_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "parent_entity_id": {
          "name": "parent_entity_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "parent_entity_type": {
          "name": "parent_entity_type",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "column_name": {
          "name": "column_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "metadata": {
          "name": "metadata",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "old_value": {
          "name": "old_value",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "new_value": {
          "name": "new_value",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "activities_created_at_idx": {
          "name": "activities_created_at_idx",
          "columns": [
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "activities_type_idx": {
          "name": "activities_type_idx",
          "columns": [
            {
              "expression": "type",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "activities_user_fk_idx": {
          "name": "activities_user_fk_idx",
          "columns": [
            {
              "expression": "user_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "activities_entity_id_idx": {
          "name": "activities_entity_id_idx",
          "columns": [
            {
              "expression": "entity_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "activities_entity_type_idx": {
          "name": "activities_entity_type_idx",
          "columns": [
            {
              "expression": "entity_type",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "activities_parent_entity_id_idx": {
          "name": "activities_parent_entity_id_idx",
          "columns": [
            {
              "expression": "parent_entity_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "activities_user_fk_users_id_fk": {
          "name": "activities_user_fk_users_id_fk",
          "tableFrom": "activities",
          "tableTo": "users",
          "columnsFrom": [
            "user_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "authenticated users can read activities": {
          "name": "authenticated users can read activities",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "true"
        },
        "users can insert activities": {
          "name": "users can insert activities",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "true"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.areas": {
      "name": "areas",
      "schema": "",
      "columns": {
        "created_at": {
          "name": "created_at",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "CURRENT_TIMESTAMP"
        },
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "created_by": {
          "name": "created_by",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "slug": {
          "name": "slug",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'area'"
        },
        "visibility": {
          "name": "visibility",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "parent_fk": {
          "name": "parent_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "areas_slug_idx": {
          "name": "areas_slug_idx",
          "columns": [
            {
              "expression": "slug",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "areas_parent_fk_areas_id_fk": {
          "name": "areas_parent_fk_areas_id_fk",
          "tableFrom": "areas",
          "tableTo": "areas",
          "columnsFrom": [
            "parent_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "data.read can read areas": {
          "name": "data.read can read areas",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.read'))"
        },
        "data.edit can insert areas": {
          "name": "data.edit can insert areas",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.edit can update areas": {
          "name": "data.edit can update areas",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.edit'))",
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.delete can delete areas": {
          "name": "data.delete can delete areas",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.delete'))"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.ascents": {
      "name": "ascents",
      "schema": "",
      "columns": {
        "created_at": {
          "name": "created_at",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "CURRENT_TIMESTAMP"
        },
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "created_by": {
          "name": "created_by",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "date_time": {
          "name": "date_time",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "CURRENT_TIMESTAMP"
        },
        "notes": {
          "name": "notes",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "grade_fk": {
          "name": "grade_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "route_fk": {
          "name": "route_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "ascents_created_by_idx": {
          "name": "ascents_created_by_idx",
          "columns": [
            {
              "expression": "created_by",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "ascents_route_fk_idx": {
          "name": "ascents_route_fk_idx",
          "columns": [
            {
              "expression": "route_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "ascents_grade_fk_grades_id_fk": {
          "name": "ascents_grade_fk_grades_id_fk",
          "tableFrom": "ascents",
          "tableTo": "grades",
          "columnsFrom": [
            "grade_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "ascents_route_fk_routes_id_fk": {
          "name": "ascents_route_fk_routes_id_fk",
          "tableFrom": "ascents",
          "tableTo": "routes",
          "columnsFrom": [
            "route_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "data.read can insert ascents": {
          "name": "data.read can insert ascents",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(SELECT authorize('data.read'))"
        },
        "data.read can read ascents": {
          "name": "data.read can read ascents",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.read'))"
        },
        "data.read can update their own ascents": {
          "name": "data.read can update their own ascents",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\n          EXISTS (\n            SELECT\n              1\n            FROM\n              public.users u\n            WHERE\n              u.id = created_by\n              AND u.auth_user_fk = (SELECT auth.uid())\n          )\n        ",
          "withCheck": "\n          EXISTS (\n            SELECT\n              1\n            FROM\n              public.users u\n            WHERE\n              u.id = created_by\n              AND u.auth_user_fk = (SELECT auth.uid())\n          )\n        "
        },
        "data.read can delete their own ascents": {
          "name": "data.read can delete their own ascents",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\n          EXISTS (\n            SELECT\n              1\n            FROM\n              public.users u\n            WHERE\n              u.id = created_by\n              AND u.auth_user_fk = (SELECT auth.uid())\n          )\n        "
        },
        "data.edit can update ascents": {
          "name": "data.edit can update ascents",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.edit'))",
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.delete can delete ascents": {
          "name": "data.delete can delete ascents",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.delete'))"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.blocks": {
      "name": "blocks",
      "schema": "",
      "columns": {
        "created_at": {
          "name": "created_at",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "CURRENT_TIMESTAMP"
        },
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "created_by": {
          "name": "created_by",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "slug": {
          "name": "slug",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "area_fk": {
          "name": "area_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "geolocation_fk": {
          "name": "geolocation_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "order": {
          "name": "order",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "blocks_slug_idx": {
          "name": "blocks_slug_idx",
          "columns": [
            {
              "expression": "slug",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "blocks_area_fk_areas_id_fk": {
          "name": "blocks_area_fk_areas_id_fk",
          "tableFrom": "blocks",
          "tableTo": "areas",
          "columnsFrom": [
            "area_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "blocks_geolocation_fk_geolocations_id_fk": {
          "name": "blocks_geolocation_fk_geolocations_id_fk",
          "tableFrom": "blocks",
          "tableTo": "geolocations",
          "columnsFrom": [
            "geolocation_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "data.read can read blocks": {
          "name": "data.read can read blocks",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.read'))"
        },
        "data.edit can insert blocks": {
          "name": "data.edit can insert blocks",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.edit can update blocks": {
          "name": "data.edit can update blocks",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.edit'))",
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.delete can delete blocks": {
          "name": "data.delete can delete blocks",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.delete'))"
        },
        "data.read can update blocks": {
          "name": "data.read can update blocks",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.read'))",
          "withCheck": "(SELECT authorize('data.read'))"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.files": {
      "name": "files",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "path": {
          "name": "path",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "area_fk": {
          "name": "area_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "ascent_fk": {
          "name": "ascent_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "route_fk": {
          "name": "route_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "block_fk": {
          "name": "block_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "files_area_fk_idx": {
          "name": "files_area_fk_idx",
          "columns": [
            {
              "expression": "area_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "files_ascent_fk_idx": {
          "name": "files_ascent_fk_idx",
          "columns": [
            {
              "expression": "ascent_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "files_block_fk_idx": {
          "name": "files_block_fk_idx",
          "columns": [
            {
              "expression": "block_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "files_route_fk_idx": {
          "name": "files_route_fk_idx",
          "columns": [
            {
              "expression": "route_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "files_area_fk_areas_id_fk": {
          "name": "files_area_fk_areas_id_fk",
          "tableFrom": "files",
          "tableTo": "areas",
          "columnsFrom": [
            "area_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "files_ascent_fk_ascents_id_fk": {
          "name": "files_ascent_fk_ascents_id_fk",
          "tableFrom": "files",
          "tableTo": "ascents",
          "columnsFrom": [
            "ascent_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "files_route_fk_routes_id_fk": {
          "name": "files_route_fk_routes_id_fk",
          "tableFrom": "files",
          "tableTo": "routes",
          "columnsFrom": [
            "route_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "files_block_fk_blocks_id_fk": {
          "name": "files_block_fk_blocks_id_fk",
          "tableFrom": "files",
          "tableTo": "blocks",
          "columnsFrom": [
            "block_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "data.read can insert files": {
          "name": "data.read can insert files",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(SELECT authorize('data.read'))"
        },
        "data.read can read files": {
          "name": "data.read can read files",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.read'))"
        },
        "data.read can update files belonging to their own ascents": {
          "name": "data.read can update files belonging to their own ascents",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\n          EXISTS (\n            SELECT\n              1\n            FROM\n              public.ascents a\n              JOIN public.users u ON a.created_by = u.id\n            WHERE\n              a.id = ascent_fk\n              AND u.auth_user_fk = (SELECT auth.uid())\n          )\n        ",
          "withCheck": "\n          EXISTS (\n            SELECT\n              1\n            FROM\n              public.ascents a\n              JOIN public.users u ON a.created_by = u.id\n            WHERE\n              a.id = ascent_fk\n              AND u.auth_user_fk = (SELECT auth.uid())\n          )\n        "
        },
        "data.read can delete files belonging to their own ascents": {
          "name": "data.read can delete files belonging to their own ascents",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\n          EXISTS (\n            SELECT\n              1\n            FROM\n              public.ascents a\n              JOIN public.users u ON a.created_by = u.id\n            WHERE\n              a.id = ascent_fk\n              AND u.auth_user_fk = (SELECT auth.uid())\n          )\n        "
        },
        "data.edit can update files": {
          "name": "data.edit can update files",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.edit'))",
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.delete can delete files": {
          "name": "data.delete can delete files",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.delete'))"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.first_ascensionists": {
      "name": "first_ascensionists",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_fk": {
          "name": "user_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "first_ascensionists_user_fk_idx": {
          "name": "first_ascensionists_user_fk_idx",
          "columns": [
            {
              "expression": "user_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "first_ascensionists_name_idx": {
          "name": "first_ascensionists_name_idx",
          "columns": [
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "first_ascensionists_user_fk_users_id_fk": {
          "name": "first_ascensionists_user_fk_users_id_fk",
          "tableFrom": "first_ascensionists",
          "tableTo": "users",
          "columnsFrom": [
            "user_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "data.read can fully access first_ascensionists": {
          "name": "data.read can fully access first_ascensionists",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.read'))",
          "withCheck": "(SELECT authorize('data.read'))"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.geolocations": {
      "name": "geolocations",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "lat": {
          "name": "lat",
          "type": "real",
          "primaryKey": false,
          "notNull": true
        },
        "long": {
          "name": "long",
          "type": "real",
          "primaryKey": false,
          "notNull": true
        },
        "area_fk": {
          "name": "area_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "block_fk": {
          "name": "block_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "geolocations_area_fk_idx": {
          "name": "geolocations_area_fk_idx",
          "columns": [
            {
              "expression": "area_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "geolocations_block_fk_idx": {
          "name": "geolocations_block_fk_idx",
          "columns": [
            {
              "expression": "block_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "geolocations_area_fk_areas_id_fk": {
          "name": "geolocations_area_fk_areas_id_fk",
          "tableFrom": "geolocations",
          "tableTo": "areas",
          "columnsFrom": [
            "area_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "geolocations_block_fk_blocks_id_fk": {
          "name": "geolocations_block_fk_blocks_id_fk",
          "tableFrom": "geolocations",
          "tableTo": "blocks",
          "columnsFrom": [
            "block_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "data.read can read geolocations": {
          "name": "data.read can read geolocations",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.read'))"
        },
        "data.edit can insert geolocations": {
          "name": "data.edit can insert geolocations",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.edit can update geolocations": {
          "name": "data.edit can update geolocations",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.edit'))",
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.delete can delete geolocations": {
          "name": "data.delete can delete geolocations",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.delete'))"
        },
        "data.read can insert geolocations": {
          "name": "data.read can insert geolocations",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(SELECT authorize('data.read'))"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.grades": {
      "name": "grades",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "FB": {
          "name": "FB",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "V": {
          "name": "V",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "authenticated users can fully access grades": {
          "name": "authenticated users can fully access grades",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "authenticated"
          ],
          "using": "true",
          "withCheck": "true"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.role_permissions": {
      "name": "role_permissions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "role": {
          "name": "role",
          "type": "app_role",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "permission": {
          "name": "permission",
          "type": "app_permission",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "authenticated users can read role_permissions": {
          "name": "authenticated users can read role_permissions",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "true"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.route_external_resource_27crags": {
      "name": "route_external_resource_27crags",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "searchable_id": {
          "name": "searchable_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "searchable_type": {
          "name": "searchable_type",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "country_name": {
          "name": "country_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "location_name": {
          "name": "location_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "crag_id": {
          "name": "crag_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "latitude": {
          "name": "latitude",
          "type": "real",
          "primaryKey": false,
          "notNull": false
        },
        "longitude": {
          "name": "longitude",
          "type": "real",
          "primaryKey": false,
          "notNull": false
        },
        "path": {
          "name": "path",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "url": {
          "name": "url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "external_resources_fk": {
          "name": "external_resources_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "route_external_resource_27crags_external_resources_fk_route_external_resources_id_fk": {
          "name": "route_external_resource_27crags_external_resources_fk_route_external_resources_id_fk",
          "tableFrom": "route_external_resource_27crags",
          "tableTo": "route_external_resources",
          "columnsFrom": [
            "external_resources_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "data.read can read route_external_resource_27crags": {
          "name": "data.read can read route_external_resource_27crags",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.read'))"
        },
        "data.edit can insert route_external_resource_27crags": {
          "name": "data.edit can insert route_external_resource_27crags",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.edit can update route_external_resource_27crags": {
          "name": "data.edit can update route_external_resource_27crags",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.edit'))",
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.delete can delete route_external_resource_27crags": {
          "name": "data.delete can delete route_external_resource_27crags",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.delete'))"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.route_external_resource_8a": {
      "name": "route_external_resource_8a",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "zlaggable_name": {
          "name": "zlaggable_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zlaggable_slug": {
          "name": "zlaggable_slug",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "zlaggable_id": {
          "name": "zlaggable_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "crag_name": {
          "name": "crag_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "crag_slug": {
          "name": "crag_slug",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "country_slug": {
          "name": "country_slug",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "country_name": {
          "name": "country_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "area_name": {
          "name": "area_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "area_slug": {
          "name": "area_slug",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "sector_name": {
          "name": "sector_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "sector_slug": {
          "name": "sector_slug",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "grade_index": {
          "name": "grade_index",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "type": {
          "name": "type",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "category": {
          "name": "category",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "average_rating": {
          "name": "average_rating",
          "type": "real",
          "primaryKey": false,
          "notNull": false
        },
        "difficulty": {
          "name": "difficulty",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "url": {
          "name": "url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "external_resources_fk": {
          "name": "external_resources_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "route_external_resource_8a_external_resources_fk_route_external_resources_id_fk": {
          "name": "route_external_resource_8a_external_resources_fk_route_external_resources_id_fk",
          "tableFrom": "route_external_resource_8a",
          "tableTo": "route_external_resources",
          "columnsFrom": [
            "external_resources_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "data.read can read route_external_resource_8a": {
          "name": "data.read can read route_external_resource_8a",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.read'))"
        },
        "data.edit can insert route_external_resource_8a": {
          "name": "data.edit can insert route_external_resource_8a",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.edit can update route_external_resource_8a": {
          "name": "data.edit can update route_external_resource_8a",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.edit'))",
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.delete can delete route_external_resource_8a": {
          "name": "data.delete can delete route_external_resource_8a",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.delete'))"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.route_external_resource_the_crag": {
      "name": "route_external_resource_the_crag",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "grade": {
          "name": "grade",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "node": {
          "name": "node",
          "type": "bigint",
          "primaryKey": false,
          "notNull": false
        },
        "rating": {
          "name": "rating",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "tags": {
          "name": "tags",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "url": {
          "name": "url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "external_resources_fk": {
          "name": "external_resources_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "route_external_resource_the_crag_external_resources_fk_route_external_resources_id_fk": {
          "name": "route_external_resource_the_crag_external_resources_fk_route_external_resources_id_fk",
          "tableFrom": "route_external_resource_the_crag",
          "tableTo": "route_external_resources",
          "columnsFrom": [
            "external_resources_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "data.read can read route_external_resource_the_crag": {
          "name": "data.read can read route_external_resource_the_crag",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.read'))"
        },
        "data.edit can insert route_external_resource_the_crag": {
          "name": "data.edit can insert route_external_resource_the_crag",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.edit can update route_external_resource_the_crag": {
          "name": "data.edit can update route_external_resource_the_crag",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.edit'))",
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.delete can delete route_external_resource_the_crag": {
          "name": "data.delete can delete route_external_resource_the_crag",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.delete'))"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.route_external_resources": {
      "name": "route_external_resources",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "route_fk": {
          "name": "route_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "external_resource_8a_fk": {
          "name": "external_resource_8a_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "external_resource_27crags_fk": {
          "name": "external_resource_27crags_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "external_resource_the_crag_fk": {
          "name": "external_resource_the_crag_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "route_external_resources_route_fk_idx": {
          "name": "route_external_resources_route_fk_idx",
          "columns": [
            {
              "expression": "route_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "route_external_resources_route_fk_routes_id_fk": {
          "name": "route_external_resources_route_fk_routes_id_fk",
          "tableFrom": "route_external_resources",
          "tableTo": "routes",
          "columnsFrom": [
            "route_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "route_external_resources_external_resource_8a_fk_route_external_resource_8a_id_fk": {
          "name": "route_external_resources_external_resource_8a_fk_route_external_resource_8a_id_fk",
          "tableFrom": "route_external_resources",
          "tableTo": "route_external_resource_8a",
          "columnsFrom": [
            "external_resource_8a_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "route_external_resources_external_resource_27crags_fk_route_external_resource_27crags_id_fk": {
          "name": "route_external_resources_external_resource_27crags_fk_route_external_resource_27crags_id_fk",
          "tableFrom": "route_external_resources",
          "tableTo": "route_external_resource_27crags",
          "columnsFrom": [
            "external_resource_27crags_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "route_external_resources_external_resource_the_crag_fk_route_external_resource_the_crag_id_fk": {
          "name": "route_external_resources_external_resource_the_crag_fk_route_external_resource_the_crag_id_fk",
          "tableFrom": "route_external_resources",
          "tableTo": "route_external_resource_the_crag",
          "columnsFrom": [
            "external_resource_the_crag_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "data.read can read route_external_resources": {
          "name": "data.read can read route_external_resources",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.read'))"
        },
        "data.edit can insert route_external_resources": {
          "name": "data.edit can insert route_external_resources",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.edit can update route_external_resources": {
          "name": "data.edit can update route_external_resources",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.edit'))",
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.delete can delete route_external_resources": {
          "name": "data.delete can delete route_external_resources",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.delete'))"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.routes": {
      "name": "routes",
      "schema": "",
      "columns": {
        "created_at": {
          "name": "created_at",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "CURRENT_TIMESTAMP"
        },
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "created_by": {
          "name": "created_by",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "slug": {
          "name": "slug",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "rating": {
          "name": "rating",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "first_ascent_year": {
          "name": "first_ascent_year",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "block_fk": {
          "name": "block_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "external_resources_fk": {
          "name": "external_resources_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "grade_fk": {
          "name": "grade_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "routes_slug_idx": {
          "name": "routes_slug_idx",
          "columns": [
            {
              "expression": "slug",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "routes_block_fk_idx": {
          "name": "routes_block_fk_idx",
          "columns": [
            {
              "expression": "block_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "routes_block_fk_blocks_id_fk": {
          "name": "routes_block_fk_blocks_id_fk",
          "tableFrom": "routes",
          "tableTo": "blocks",
          "columnsFrom": [
            "block_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "routes_external_resources_fk_route_external_resources_id_fk": {
          "name": "routes_external_resources_fk_route_external_resources_id_fk",
          "tableFrom": "routes",
          "tableTo": "route_external_resources",
          "columnsFrom": [
            "external_resources_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "routes_grade_fk_grades_id_fk": {
          "name": "routes_grade_fk_grades_id_fk",
          "tableFrom": "routes",
          "tableTo": "grades",
          "columnsFrom": [
            "grade_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "data.read can read routes": {
          "name": "data.read can read routes",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.read'))"
        },
        "data.edit can insert routes": {
          "name": "data.edit can insert routes",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.edit can update routes": {
          "name": "data.edit can update routes",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.edit'))",
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.delete can delete routes": {
          "name": "data.delete can delete routes",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.delete'))"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.routes_to_first_ascensionists": {
      "name": "routes_to_first_ascensionists",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "route_fk": {
          "name": "route_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "first_ascensionist_fk": {
          "name": "first_ascensionist_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {
        "routes_to_first_ascensionists_route_fk_idx": {
          "name": "routes_to_first_ascensionists_route_fk_idx",
          "columns": [
            {
              "expression": "route_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "routes_to_first_ascensionists_first_ascensionist_fk_idx": {
          "name": "routes_to_first_ascensionists_first_ascensionist_fk_idx",
          "columns": [
            {
              "expression": "first_ascensionist_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "routes_to_first_ascensionists_route_fk_routes_id_fk": {
          "name": "routes_to_first_ascensionists_route_fk_routes_id_fk",
          "tableFrom": "routes_to_first_ascensionists",
          "tableTo": "routes",
          "columnsFrom": [
            "route_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "routes_to_first_ascensionists_first_ascensionist_fk_first_ascensionists_id_fk": {
          "name": "routes_to_first_ascensionists_first_ascensionist_fk_first_ascensionists_id_fk",
          "tableFrom": "routes_to_first_ascensionists",
          "tableTo": "first_ascensionists",
          "columnsFrom": [
            "first_ascensionist_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "data.read can fully access routes_to_first_ascensionists": {
          "name": "data.read can fully access routes_to_first_ascensionists",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.read'))",
          "withCheck": "(SELECT authorize('data.read'))"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.routes_to_tags": {
      "name": "routes_to_tags",
      "schema": "",
      "columns": {
        "route_fk": {
          "name": "route_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "tag_fk": {
          "name": "tag_fk",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "routes_to_tags_route_fk_routes_id_fk": {
          "name": "routes_to_tags_route_fk_routes_id_fk",
          "tableFrom": "routes_to_tags",
          "tableTo": "routes",
          "columnsFrom": [
            "route_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "routes_to_tags_tag_fk_tags_id_fk": {
          "name": "routes_to_tags_tag_fk_tags_id_fk",
          "tableFrom": "routes_to_tags",
          "tableTo": "tags",
          "columnsFrom": [
            "tag_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {
        "routes_to_tags_route_fk_tag_fk_pk": {
          "name": "routes_to_tags_route_fk_tag_fk_pk",
          "columns": [
            "route_fk",
            "tag_fk"
          ]
        }
      },
      "uniqueConstraints": {},
      "policies": {
        "data.read can read routes_to_tags": {
          "name": "data.read can read routes_to_tags",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.read'))"
        },
        "data.edit can insert routes_to_tags": {
          "name": "data.edit can insert routes_to_tags",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.edit can update routes_to_tags": {
          "name": "data.edit can update routes_to_tags",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.edit'))",
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.delete can delete routes_to_tags": {
          "name": "data.delete can delete routes_to_tags",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.delete'))"
        },
        "data.edit can delete routes_to_tags": {
          "name": "data.edit can delete routes_to_tags",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.edit'))"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.tags": {
      "name": "tags",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "text",
          "primaryKey": true,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "data.read can read tags": {
          "name": "data.read can read tags",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.read'))"
        },
        "data.edit can insert tags": {
          "name": "data.edit can insert tags",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.edit can update tags": {
          "name": "data.edit can update tags",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.edit'))",
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.delete can delete tags": {
          "name": "data.delete can delete tags",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.delete'))"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.topo_routes": {
      "name": "topo_routes",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "top_type": {
          "name": "top_type",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "path": {
          "name": "path",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "route_fk": {
          "name": "route_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "topo_fk": {
          "name": "topo_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "topo_routes_route_fk_idx": {
          "name": "topo_routes_route_fk_idx",
          "columns": [
            {
              "expression": "route_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "topo_routes_topo_fk_idx": {
          "name": "topo_routes_topo_fk_idx",
          "columns": [
            {
              "expression": "topo_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "topo_routes_route_fk_routes_id_fk": {
          "name": "topo_routes_route_fk_routes_id_fk",
          "tableFrom": "topo_routes",
          "tableTo": "routes",
          "columnsFrom": [
            "route_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "topo_routes_topo_fk_topos_id_fk": {
          "name": "topo_routes_topo_fk_topos_id_fk",
          "tableFrom": "topo_routes",
          "tableTo": "topos",
          "columnsFrom": [
            "topo_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "data.read can read topo_routes": {
          "name": "data.read can read topo_routes",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.read'))"
        },
        "data.edit can insert topo_routes": {
          "name": "data.edit can insert topo_routes",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.edit can update topo_routes": {
          "name": "data.edit can update topo_routes",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.edit'))",
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.delete can delete topo_routes": {
          "name": "data.delete can delete topo_routes",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.delete'))"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.topos": {
      "name": "topos",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "block_fk": {
          "name": "block_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "file_fk": {
          "name": "file_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "topos_block_fk_idx": {
          "name": "topos_block_fk_idx",
          "columns": [
            {
              "expression": "block_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "topos_block_fk_blocks_id_fk": {
          "name": "topos_block_fk_blocks_id_fk",
          "tableFrom": "topos",
          "tableTo": "blocks",
          "columnsFrom": [
            "block_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "topos_file_fk_files_id_fk": {
          "name": "topos_file_fk_files_id_fk",
          "tableFrom": "topos",
          "tableTo": "files",
          "columnsFrom": [
            "file_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "data.read can read topos": {
          "name": "data.read can read topos",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.read'))"
        },
        "data.edit can insert topos": {
          "name": "data.edit can insert topos",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.edit can update topos": {
          "name": "data.edit can update topos",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.edit'))",
          "withCheck": "(SELECT authorize('data.edit'))"
        },
        "data.delete can delete topos": {
          "name": "data.delete can delete topos",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.delete'))"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.user_roles": {
      "name": "user_roles",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "auth_user_fk": {
          "name": "auth_user_fk",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "role": {
          "name": "role",
          "type": "app_role",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "user_roles_auth_user_fk_users_id_fk": {
          "name": "user_roles_auth_user_fk_users_id_fk",
          "tableFrom": "user_roles",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "auth_user_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "auth admins can read user_roles": {
          "name": "auth admins can read user_roles",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "supabase_auth_admin"
          ],
          "using": "true"
        },
        "users can read own user_roles": {
          "name": "users can read own user_roles",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT auth.uid()) = auth_user_fk"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.user_settings": {
      "name": "user_settings",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "auth_user_fk": {
          "name": "auth_user_fk",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "user_fk": {
          "name": "user_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "cookie_8a": {
          "name": "cookie_8a",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "cookie_27crags": {
          "name": "cookie_27crags",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "cookie_the_crag": {
          "name": "cookie_the_crag",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "grading_scale": {
          "name": "grading_scale",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'FB'"
        }
      },
      "indexes": {
        "user_settings_auth_user_fk_idx": {
          "name": "user_settings_auth_user_fk_idx",
          "columns": [
            {
              "expression": "auth_user_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "user_settings_user_fk_idx": {
          "name": "user_settings_user_fk_idx",
          "columns": [
            {
              "expression": "user_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "user_settings_auth_user_fk_users_id_fk": {
          "name": "user_settings_auth_user_fk_users_id_fk",
          "tableFrom": "user_settings",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "auth_user_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "user_settings_user_fk_users_id_fk": {
          "name": "user_settings_user_fk_users_id_fk",
          "tableFrom": "user_settings",
          "tableTo": "users",
          "columnsFrom": [
            "user_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "users can insert own users_settings": {
          "name": "users can insert own users_settings",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "(SELECT auth.uid()) = auth_user_fk"
        },
        "users can read own users_settings": {
          "name": "users can read own users_settings",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT auth.uid()) = auth_user_fk"
        },
        "users can update own users_settings": {
          "name": "users can update own users_settings",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT auth.uid()) = auth_user_fk",
          "withCheck": "(SELECT auth.uid()) = auth_user_fk"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.users": {
      "name": "users",
      "schema": "",
      "columns": {
        "created_at": {
          "name": "created_at",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "CURRENT_TIMESTAMP"
        },
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "username": {
          "name": "username",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "auth_user_fk": {
          "name": "auth_user_fk",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "first_ascentionist_fk": {
          "name": "first_ascentionist_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "user_settings_fk": {
          "name": "user_settings_fk",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "users_auth_user_fk_idx": {
          "name": "users_auth_user_fk_idx",
          "columns": [
            {
              "expression": "auth_user_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "users_first_ascentionist_fk_idx": {
          "name": "users_first_ascentionist_fk_idx",
          "columns": [
            {
              "expression": "first_ascentionist_fk",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "users_username_idx": {
          "name": "users_username_idx",
          "columns": [
            {
              "expression": "username",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "users_auth_user_fk_users_id_fk": {
          "name": "users_auth_user_fk_users_id_fk",
          "tableFrom": "users",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "auth_user_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "users_first_ascentionist_fk_first_ascensionists_id_fk": {
          "name": "users_first_ascentionist_fk_first_ascensionists_id_fk",
          "tableFrom": "users",
          "tableTo": "first_ascensionists",
          "columnsFrom": [
            "first_ascentionist_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "users_user_settings_fk_user_settings_id_fk": {
          "name": "users_user_settings_fk_user_settings_id_fk",
          "tableFrom": "users",
          "tableTo": "user_settings",
          "columnsFrom": [
            "user_settings_fk"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "data.read can read users": {
          "name": "data.read can read users",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT authorize('data.read'))"
        },
        "users can update own users": {
          "name": "users can update own users",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "(SELECT auth.uid()) = auth_user_fk",
          "withCheck": "(SELECT auth.uid()) = auth_user_fk"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    }
  },
  "enums": {
    "public.activity_type": {
      "name": "activity_type",
      "schema": "public",
      "values": [
        "created",
        "updated",
        "deleted",
        "uploaded"
      ]
    },
    "public.app_permission": {
      "name": "app_permission",
      "schema": "public",
      "values": [
        "data.read",
        "data.edit",
        "data.delete",
        "data.export"
      ]
    },
    "public.app_role": {
      "name": "app_role",
      "schema": "public",
      "values": [
        "user",
        "maintainer",
        "admin"
      ]
    }
  },
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}