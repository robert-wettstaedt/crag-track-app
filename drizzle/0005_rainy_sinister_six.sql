DROP POLICY "Allow auth admin to read role permissions" ON "role_permissions" CASCADE;--> statement-breakpoint
DROP POLICY "Allow auth admin to read user roles" ON "user_roles" CASCADE;--> statement-breakpoint
CREATE POLICY "data.edit can fully access areas" ON "areas" AS PERMISSIVE FOR ALL TO "authenticated" USING ((SELECT authorize('data.edit'))) WITH CHECK ((SELECT authorize('data.edit')));--> statement-breakpoint
CREATE POLICY "data.read can read areas" ON "ascents" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((SELECT authorize('data.read')));--> statement-breakpoint
CREATE POLICY "data.edit can fully access areas" ON "ascents" AS PERMISSIVE FOR ALL TO "authenticated" USING ((SELECT authorize('data.edit'))) WITH CHECK ((SELECT authorize('data.edit')));--> statement-breakpoint
CREATE POLICY "data.read can read blocks" ON "blocks" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((SELECT authorize('data.read')));--> statement-breakpoint
CREATE POLICY "data.edit can fully access blocks" ON "blocks" AS PERMISSIVE FOR ALL TO "authenticated" USING ((SELECT authorize('data.edit'))) WITH CHECK ((SELECT authorize('data.edit')));--> statement-breakpoint
CREATE POLICY "data.read can read first_ascents" ON "first_ascents" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((SELECT authorize('data.read')));--> statement-breakpoint
CREATE POLICY "data.edit can fully access first_ascents" ON "first_ascents" AS PERMISSIVE FOR ALL TO "authenticated" USING ((SELECT authorize('data.edit'))) WITH CHECK ((SELECT authorize('data.edit')));--> statement-breakpoint
CREATE POLICY "data.read can read geolocations" ON "geolocations" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((SELECT authorize('data.read')));--> statement-breakpoint
CREATE POLICY "data.edit can fully access geolocations" ON "geolocations" AS PERMISSIVE FOR ALL TO "authenticated" USING ((SELECT authorize('data.edit'))) WITH CHECK ((SELECT authorize('data.edit')));--> statement-breakpoint
CREATE POLICY "Allow auth admin to read role_permissions" ON "role_permissions" AS PERMISSIVE FOR SELECT TO "supabase_auth_admin" USING (true);--> statement-breakpoint
CREATE POLICY "data.read can read route_external_resource_27crags" ON "route_external_resource_27crags" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((SELECT authorize('data.read')));--> statement-breakpoint
CREATE POLICY "data.edit can fully access route_external_resource_27crags" ON "route_external_resource_27crags" AS PERMISSIVE FOR ALL TO "authenticated" USING ((SELECT authorize('data.edit'))) WITH CHECK ((SELECT authorize('data.edit')));--> statement-breakpoint
CREATE POLICY "data.read can read route_external_resource_8a" ON "route_external_resource_8a" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((SELECT authorize('data.read')));--> statement-breakpoint
CREATE POLICY "data.edit can fully access route_external_resource_8a" ON "route_external_resource_8a" AS PERMISSIVE FOR ALL TO "authenticated" USING ((SELECT authorize('data.edit'))) WITH CHECK ((SELECT authorize('data.edit')));--> statement-breakpoint
CREATE POLICY "data.read can read route_external_resource_the_crag" ON "route_external_resource_the_crag" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((SELECT authorize('data.read')));--> statement-breakpoint
CREATE POLICY "data.edit can fully access route_external_resource_the_crag" ON "route_external_resource_the_crag" AS PERMISSIVE FOR ALL TO "authenticated" USING ((SELECT authorize('data.edit'))) WITH CHECK ((SELECT authorize('data.edit')));--> statement-breakpoint
CREATE POLICY "data.read can read route_external_resources" ON "route_external_resources" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((SELECT authorize('data.read')));--> statement-breakpoint
CREATE POLICY "data.edit can fully access route_external_resources" ON "route_external_resources" AS PERMISSIVE FOR ALL TO "authenticated" USING ((SELECT authorize('data.edit'))) WITH CHECK ((SELECT authorize('data.edit')));--> statement-breakpoint
CREATE POLICY "data.read can read routes" ON "routes" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((SELECT authorize('data.read')));--> statement-breakpoint
CREATE POLICY "data.edit can fully access routes" ON "routes" AS PERMISSIVE FOR ALL TO "authenticated" USING ((SELECT authorize('data.edit'))) WITH CHECK ((SELECT authorize('data.edit')));--> statement-breakpoint
CREATE POLICY "data.read can read routes_to_tags" ON "routes_to_tags" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((SELECT authorize('data.read')));--> statement-breakpoint
CREATE POLICY "data.edit can fully access routes_to_tags" ON "routes_to_tags" AS PERMISSIVE FOR ALL TO "authenticated" USING ((SELECT authorize('data.edit'))) WITH CHECK ((SELECT authorize('data.edit')));--> statement-breakpoint
CREATE POLICY "data.read can read tags" ON "tags" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((SELECT authorize('data.read')));--> statement-breakpoint
CREATE POLICY "data.edit can fully access tags" ON "tags" AS PERMISSIVE FOR ALL TO "authenticated" USING ((SELECT authorize('data.edit'))) WITH CHECK ((SELECT authorize('data.edit')));--> statement-breakpoint
CREATE POLICY "data.read can read topo_routes" ON "topo_routes" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((SELECT authorize('data.read')));--> statement-breakpoint
CREATE POLICY "data.edit can fully access topo_routes" ON "topo_routes" AS PERMISSIVE FOR ALL TO "authenticated" USING ((SELECT authorize('data.edit'))) WITH CHECK ((SELECT authorize('data.edit')));--> statement-breakpoint
CREATE POLICY "data.read can read topos" ON "topos" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((SELECT authorize('data.read')));--> statement-breakpoint
CREATE POLICY "data.edit can fully access topos" ON "topos" AS PERMISSIVE FOR ALL TO "authenticated" USING ((SELECT authorize('data.edit'))) WITH CHECK ((SELECT authorize('data.edit')));--> statement-breakpoint
CREATE POLICY "Allow auth admin to read user_roles" ON "user_roles" AS PERMISSIVE FOR SELECT TO "supabase_auth_admin" USING (true);